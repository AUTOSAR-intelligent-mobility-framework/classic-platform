/*
* Configuration of module: Pwm (Pwm_Cfg.h)
*
* Created by:              
* Copyright:               
*
* Configured for (MCU):    MPC560x
*
* Module vendor:           ArcCore
* Generator version:       2.0.2
*
* Generated by Arctic Studio (http://arccore.com) 
*           on Fri May 27 15:20:33 CEST 2011
*/

#if !(((PWM_SW_MAJOR_VERSION == 1) && (PWM_SW_MINOR_VERSION == 2)) )
#error Pwm: Configuration file expected BSW module version to be 1.2.*
#endif


#ifndef PWM_CFG_H_
#define PWM_CFG_H_

/****************************************************************************
 * Global configuration options and defines
 */

// PWM003
#define PWM_DEV_ERROR_DETECT                STD_ON
#define PWM_NOTIFICATION_SUPPORTED          STD_ON

// PWM132. Currently only ON is supported.
#define PWM_DUTYCYCLE_UPDATED_ENDPERIOD     STD_ON
#define PWM_PERIOD_UPDATED_ENDPERIOD        STD_ON

// Define what functions to enable.
#define PWM_GET_OUTPUT_STATE                STD_ON
#define PWM_SET_PERIOD_AND_DUTY             STD_ON
#define PWM_DEINIT_API                      STD_ON
#define PWM_SET_DUTYCYCLE                    STD_ON
#define PWM_SET_OUTPUT_TO_IDLE              STD_ON
#define PWM_VERSION_INFO_API                STD_ON




/****************************************************************************
 * Not defined in AUTOSAR.
 */
#define PWM_ISR_PRIORITY	4
#define PWM_PRESCALER		15
#define PWM_NUMBER_OF_EACH_EMIOS	24
#define PWM_MAX_CHANNEL				48

/*
 * Setting to ON freezes the current output state of a PWM channel when in
 * debug mode.
 */
#define PWM_FREEZE_ENABLE	STD_ON

/****************************************************************************
 * Enumeration of channels
 * Maps a symbolic name to a hardware channel
 */
typedef enum {
	PWM_CHANNEL_1 = 44,
	PWM_CHANNEL_2 = 45,
	PWM_CHANNEL_3 = 46,
	PWM_CHANNEL_4 = 47,
    PWM_NUMBER_OF_CHANNELS = 4
} Pwm_NamedChannelsType;



/*
 * PWM106: This is implementation specific but not all values may be valid
 * within the type. This shall be chosen in order to have the most efficient
 * implementation on a specific microcontroller platform.
 *
 * PWM106 => Pwm_ChannelType == eemios channel id.
 */
typedef uint8 Pwm_ChannelType;

/*
 * PWM070: All time units used within the API services of the PWM module shall
 * be of the unit ticks.
 */
typedef uint16 Pwm_PeriodType;

typedef enum {
	PWM_CHANNEL_PRESCALER_1=0,
	PWM_CHANNEL_PRESCALER_2,
	PWM_CHANNEL_PRESCALER_3,
	PWM_CHANNEL_PRESCALER_4,
	PWM_CHANNEL_PRESCALER_AUTO,
} Pwm_ChannelPrescalerType;

/*
 * Since the AUTOSAR PWM specification uses a different unit for the duty,
 * the following macro can be used to convert between that format and the
 * mpc5516 format.
 */
#define DUTY_AND_PERIOD(_duty,_period) .duty = (_duty*_period)>>15, .period = _period


#define PWM_EMIOS_OPWM 0x5A

typedef struct {
	Pwm_ChannelType				channel;
	uint32_t					frequency;
	uint16_t					duty;
	Pwm_OutputStateType			polarity;
	Pwm_ChannelPrescalerType	prescaler;
} Pwm_ChannelConfigurationType;


typedef struct {
	Pwm_ChannelConfigurationType Channels[PWM_NUMBER_OF_CHANNELS];

	Pwm_OutputStateType IdleState[PWM_NUMBER_OF_CHANNELS];

#if PWM_SET_PERIOD_AND_DUTY==STD_ON
		Pwm_ChannelClassType  ChannelClass[PWM_NUMBER_OF_CHANNELS];
#endif

#if PWM_NOTIFICATION_SUPPORTED==STD_ON
	Pwm_NotificationHandlerType NotificationHandlers[PWM_NUMBER_OF_CHANNELS];
#endif
} Pwm_ConfigType;


#endif /* PWM_CFG_H_ */
